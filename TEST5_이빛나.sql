CREATE USER TEST IDENTIFIED BY TEST; -- (관리자 계정)

GRANT RESOURCE, CONNECT TO TEST; -- (관리자 계정)

-- 1. 아래의 TABLE 기술서를 참고하여 테이블 생성하는 구문을 작성하시오.

-- 회원테이블(TB_MEMBER) 생성
DROP TABLE TB_MEMBER;
CREATE TABLE TB_MEMBER(
    MEM_NO NUMBER PRIMARY KEY,
    MEM_ID VARCHAR2(30) NOT NULL,
    MEM_PWD VARCHAR2(30) NOT NULL,
    MEM_NAME VARCHAR2(20) NOT NULL,
    MEM_ADDR VARCHAR2(50),
    MEM_GEN CHAR(1),
    ENROLL_DATE DATE DEFAULT SYSDATE NOT NULL,
    MODIFY_DATE DATE DEFAULT SYSDATE NOT NULL,
    WITHDRAWAL_DATE DATE,
    ADMIN_YN CHAR(1) DEFAULT 'N' NOT NULL
);

-- 추가 제약조건 
-- 회원 아이디는 중복되는 값이 들어오지 못하도록 제한
-- 회원 성별로는 'M' 또는 'F'만 들어올 수 있도록 제한
-- 관리자 여부로는 'Y' 또는 'N' 만 들어올 수 있도록 제한
ALTER TABLE TB_MEMBER ADD UNIQUE(MEM_ID);
ALTER TABLE TB_MEMBER ADD CHECK(MEM_GEN IN ('M', 'F'));
ALTER TABLE TB_MEMBER ADD CHECK(ADMIN_YN IN ('Y', 'N'));

-- 상품테이블(TB_PRODUCT) 생성
CREATE TABLE TB_PRODUCT (
    PRO_CODE VARCHAR2(10) PRIMARY KEY,
    PRO_NAME VARCHAR2(30) NOT NULL,
    PRO_BRAND VARCHAR2(20)NOT NULL,
    PRO_PRICE NUMBER,
    PRO_STOCK NUMBER,
    CATEGORY VARCHAR2(20) DEFAULT '기타' NOT NULL,
    REGIST_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- 추가 제약조건
-- 카테고리에는 '의류','신발','잡화','생활용품','기타' 만 들어올 수 있도록 제한
ALTER TABLE TB_PRODUCT ADD CHECK(CATEGORY IN ('의류','신발','잡화','생활용품','기타'));

-- 옵션테이블(TB_OPTION) 생성
CREATE TABLE TB_OPTION (
    OPT_CODE VARCHAR2(10) PRIMARY KEY,
    OPT_NAME VARCHAR2(30) NOT NULL,
    OPT_PRICE NUMBER,
    OPT_STOCK NUMBER DEFAULT 0 NOT NULL,
    REGIST_DATE DATE DEFAULT SYSDATE NOT NULL,
    REF_PRO_CODE VARCHAR2(10) NOT NULL,
    FOREIGN KEY(REF_PRO_CODE) REFERENCES TB_PRODUCT
);

-- 찜하기테이블(TB_LIKE) 생성
CREATE TABLE TB_LIKE (
    MEM_NO NUMBER REFERENCES TB_MEMBER,
    PRO_CODE VARCHAR2(10) REFERENCES TB_PRODUCT,
    LIKE_DATE DATE NOT NULL,
    PRIMARY KEY(MEM_NO, PRO_CODE)
);

-- 리뷰테이블(TB_REVIEW) 생성
CREATE TABLE TB_REVIEW (
    REVIEW_NO NUMBER PRIMARY KEY,
    REVIEW_CONTENT VARCHAR2(4000) NOT NULL,
    RATING NUMBER DEFAULT 5 NOT NULL,
    REGIST_DATE DATE DEFAULT SYSDATE NOT NULL,
    MEM_NO NUMBER NOT NULL REFERENCES TB_MEMBER,
    PRO_CODE VARCHAR2(10) NOT NULL REFERENCES TB_PRODUCT
);

-- 추가 제약조건
-- 리뷰평점에는 1이상 5이하의 숫자만 들어갈 수 있도록 제한
ALTER TABLE TB_REVIEW ADD CHECK(RATING BETWEEN 1 AND 5);
/* 오답 : 4.5같은 실수를 넣을 수 없다
ALTER TABLE TB_REVIEW ADD CHECK(RATING IN (1, 2, 3, 4, 5));
*/

-- 2. 아래의 데이터 정보를 확인하여 각 테이블에 INSERT 하는 구문들도 이어서 작성하시오.
--    이 때 등록일, 회원가입일 등 날짜 관련한 데이터는 그냥 SYSDATE로 하시오.
INSERT INTO TB_MEMBER VALUES(30000, 'admin', 1234, '관리자', NULL, NULL, DEFAULT, DEFAULT, NULL, 'Y');
INSERT INTO TB_MEMBER VALUES(30001, 'user01', 'pass01', '강길동', '서울시 양천구', 'M', DEFAULT, DEFAULT, NULL, DEFAULT);
INSERT INTO TB_MEMBER VALUES(30002, 'user02', 'pass02', '김개화', '서울시 송파구', 'F', DEFAULT, DEFAULT, NULL, DEFAULT);
INSERT INTO TB_MEMBER VALUES(30003, 'user03', 'pass03', '강현수', '서울시 강동구', 'M', DEFAULT, DEFAULT, NULL, DEFAULT);

INSERT INTO TB_PRODUCT VALUES('PRO_001', '샤랄라바지', 'NAIN', 25000, 10, '의류', DEFAULT);
INSERT INTO TB_PRODUCT VALUES('PRO_002', '볼펜', '모나미', NULL, NULL, '생활용품', DEFAULT);
INSERT INTO TB_PRODUCT VALUES('PRO_003', '마우스', '로지텍', NULL, NULL, '잡화', DEFAULT);

INSERT INTO TB_OPTION VALUES('OPT_001', '검정색', 700, 150, DEFAULT, 'PRO_002');
INSERT INTO TB_OPTION VALUES('OPT_002', '빨간색', 1000, 200, DEFAULT, 'PRO_002');
INSERT INTO TB_OPTION VALUES('OPT_003', 'MX MASTER 3', 90000, 3, DEFAULT, 'PRO_003');
INSERT INTO TB_OPTION VALUES('OPT_004', 'G304', 15000, 2, DEFAULT, 'PRO_003');

INSERT INTO TB_LIKE VALUES(30001, 'PRO_003', SYSDATE);
INSERT INTO TB_LIKE VALUES(30002, 'PRO_001', SYSDATE);
INSERT INTO TB_LIKE VALUES(30001, 'PRO_001', SYSDATE);
INSERT INTO TB_LIKE VALUES(30003, 'PRO_002', SYSDATE);

INSERT INTO TB_REVIEW VALUES(1, '상품 설명처럼 너무 샤랄라하니 이쁘네요~! 잘 입겠습니다~~', DEFAULT, DEFAULT, 30002, 'PRO_001');
INSERT INTO TB_REVIEW VALUES(2, '역시 볼펜은 모나미! 근데 잘 안나와요..재구매 의사 없습니다.', 2, DEFAULT, 30003, 'PRO_002');
INSERT INTO TB_REVIEW VALUES(3, '마우스는 로지텍만 한게 없죠 MX MASTER 너무 좋네요', 4, DEFAULT, 30001, 'PRO_003');

-- 3. 샘플데이터들을 가지고 하단의 내용이 조회될 수 있는 쿼리문을 작성하시오.

-- 1) 30001번 회원이 찜한 상품들의 상품코드, 상품명, 브랜드명, 상품가격 조회
SELECT PRO_CODE "상품코드", PRO_NAME "상품명", PRO_BRAND "브랜드명", PRO_PRICE "상품가격"
FROM TB_PRODUCT
JOIN TB_LIKE USING (PRO_CODE)
WHERE MEM_NO = 30001;

-- 2) PRO_001 상품에 대해 찜한 횟수 조회
SELECT COUNT(*)
FROM TB_LIKE
WHERE PRO_CODE = 'PRO_001';

/* 오답 : 불필요한 JOIN
SELECT COUNT(PRO_CODE)"찜한 횟수"
FROM TB_PRODUCT
JOIN TB_LIKE USING (PRO_CODE)
WHERE PRO_CODE = 'PRO_001';
*/

-- 3) 전체 리뷰들의 리뷰번호, 리뷰내용, 평점, 상품명, 작성자회원아이디, 작성일(XXXX-XX-XX 형식) 조회
--    단, 리뷰번호 내림차순으로 정렬하여 최신글이 먼저 조회되도록 하시오.
SELECT REVIEW_NO, REVIEW_CONTENT, RATING, PRO_NAME, MEM_ID, TO_CHAR(REGIST_DATE, 'YYYY-MM-DD') "작성일"
FROM TB_REVIEW R
JOIN TB_MEMBER M ON (R.MEM_NO = M.MEM_NO)
JOIN TM_PRODUCT P ON (P.PRO_CODE = P.PRO_CODE)
ORDER
   BY REVEW_NO DESC;

/* 오답 : TB_REVIEW 테이블과 TB_PRODUCT 테이블 JOIN시 잘못된 컬럼으로 매칭하기 때문에 조회결과가 중복
SELECT REVIEW_NO, REVIEW_CONTENT, RATING, PRO_NAME, MEM_ID, TO_CHAR(REGIST_DATE, 'YYYY"-"MM"-"DD')
FROM TB_REVIEW
LEFT JOIN TB_MEMBER USING(MEM_NO)
LEFT JOIN TB_PRODUCT USING(REGIST_DATE)
ORDER BY REVIEW_NO DESC;
*/
-- 4) PRO_003 상품의 리뷰 평균 평점을 조회
--    단, 무조건 소수점 아래 한자리까지 표현될 수 있도록 하시오 (예를 들어 평균평점이 4일때도 4.0으로 조회될 수 있도록)
SELECT TO_CHAR(AVG(RATING), '0.0')
FROM TB_REVIEW
WHERE PRO_CODE = 'PRO_003';

/* 오답
SELECT AVG(RATING* 1.0)
FROM TB_REVIEW
WHERE PRO_CODE = 'PRO_003';
*/
